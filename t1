<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel Formula Generator</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background-color: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            margin-bottom: 30px;
            text-align: center;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #34495e;
            font-weight: 500;
        }
        input, select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 5px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #3498db;
        }
        .date-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        .radio-group {
            display: flex;
            gap: 20px;
            margin-top: 5px;
        }
        .radio-group label {
            display: flex;
            align-items: center;
            font-weight: normal;
            margin-bottom: 0;
        }
        .radio-group input[type="radio"] {
            width: auto;
            margin-right: 5px;
        }
        button {
            background-color: #3498db;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
            width: 100%;
            margin-top: 20px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .result {
            margin-top: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border: 2px solid #e9ecef;
        }
        .formula-output {
            font-family: 'Courier New', monospace;
            font-size: 14px;
            padding: 15px;
            background-color: #2c3e50;
            color: #1abc9c;
            border-radius: 5px;
            overflow-x: auto;
            white-space: nowrap;
            margin-top: 10px;
        }
        .copy-button {
            background-color: #27ae60;
            padding: 8px 20px;
            font-size: 14px;
            margin-top: 10px;
            width: auto;
        }
        .copy-button:hover {
            background-color: #229954;
        }
        .info {
            font-size: 14px;
            color: #7f8c8d;
            margin-top: 5px;
        }
        .breakdown {
            margin-top: 20px;
            padding: 15px;
            background-color: #ecf0f1;
            border-radius: 5px;
            font-size: 14px;
        }
        .breakdown h3 {
            margin-top: 0;
            color: #34495e;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Excel Formula Generator for Research Periods</h1>
        
        <div class="form-group date-group">
            <div>
                <label for="startDate">Start Date:</label>
                <input type="date" id="startDate" value="2026-01-01">
            </div>
            <div>
                <label for="endDate">End Date:</label>
                <input type="date" id="endDate" value="2026-12-31">
            </div>
        </div>

        <div class="form-group">
            <label for="effort">Percentage Effort (%):</label>
            <input type="number" id="effort" value="13" min="0" max="100" step="1">
            <div class="info">Enter as whole number (e.g., 13 for 13%)</div>
        </div>

        <div class="form-group">
            <label for="increase">Annual Increase (%):</label>
            <input type="number" id="increase" value="4" min="0" max="100" step="0.1">
            <div class="info">Enter as whole number (e.g., 4 for 4%)</div>
        </div>

        <div class="form-group">
            <label>Appointment Type:</label>
            <div class="radio-group">
                <label><input type="radio" name="appointmentType" value="9acad" checked> 9 Academic Months (8/16-5/15)</label>
                <label><input type="radio" name="appointmentType" value="12cal"> 12 Calendar Months</label>
                <label><input type="radio" name="appointmentType" value="3sum"> 3 Summer Months (5/16-8/15)</label>
            </div>
        </div>

        <div class="form-group">
            <label for="baseSalary">Base Salary (IBS):</label>
            <input type="number" id="baseSalary" value="370102" min="0" step="0.01">
            <div class="info">Current salary as of June 2025</div>
        </div>

        <div class="form-group">
            <label>Salary Basis:</label>
            <div class="radio-group">
                <label><input type="radio" name="salaryBasis" value="9" checked> Per 9 Months</label>
                <label><input type="radio" name="salaryBasis" value="12"> Per 12 Months</label>
            </div>
        </div>

        <button onclick="generateFormula()">Generate Excel Formula</button>

        <div id="result" class="result" style="display: none;">
            <h3>Generated Formula:</h3>
            <div class="formula-output" id="formulaOutput"></div>
            <button class="copy-button" onclick="copyFormula()">Copy Formula</button>
            <div id="breakdown" class="breakdown"></div>
        </div>
    </div>

    <script>
        // We are in June 2025
        const CURRENT_DATE = new Date(2025, 5, 26); // June 26, 2025

        function parseDate(dateString) {
            const [year, month, day] = dateString.split('-').map(num => parseInt(num, 10));
            return new Date(year, month - 1, day);
        }

        function generateFormula() {
            const startDate = parseDate(document.getElementById('startDate').value);
            const endDate = parseDate(document.getElementById('endDate').value);
            const effort = parseFloat(document.getElementById('effort').value) / 100;
            const increase = parseFloat(document.getElementById('increase').value) / 100;
            const appointmentType = document.querySelector('input[name="appointmentType"]:checked').value;
            const baseSalary = parseFloat(document.getElementById('baseSalary').value);
            const salaryBasis = parseInt(document.querySelector('input[name="salaryBasis"]:checked').value);

            // Get all increase dates that fall within or before our period
            const increaseDates = getIncreaseDates(startDate, endDate);
            
            // Split the period by increase dates
            const periods = splitByIncreaseDates(startDate, endDate, increaseDates);
            
            // Calculate formula parts
            const formulaParts = [];
            let breakdownHTML = '<h3>Calculation Breakdown:</h3>';
            let totalMonthsCalculated = 0;

            periods.forEach(period => {
                // Calculate months for this period based on appointment type
                const months = calculateMonthsForPeriod(period.start, period.end, appointmentType);
                totalMonthsCalculated += months;
                
                if (months > 0) {
                    // Count how many increases apply to this period
                    const increaseCount = countIncreasesBeforeDate(period.start);
                    
                    // Build increase factor
                    const increaseMultiplier = (1 + increase).toFixed(2);
                    const increaseFactor = increaseCount === 0 ? 1 : 
                                         increaseCount === 1 ? increaseMultiplier : 
                                         `${increaseMultiplier}^${increaseCount}`;
                    
                    // Build formula part
                    const formulaPart = `(${effort}*(${baseSalary}*${increaseFactor}/${salaryBasis})*${months})`;
                    formulaParts.push(formulaPart);

                    // Add to breakdown
                    const percentIncrease = increaseCount === 0 ? 0 : ((Math.pow(1 + increase, increaseCount) - 1) * 100).toFixed(1);
                    breakdownHTML += `<p><strong>${formatDate(period.start)} - ${formatDate(period.end)}:</strong> ${months} months at ${increaseCount === 0 ? 'base' : percentIncrease + '% increased'} salary (${increaseCount} increase${increaseCount !== 1 ? 's' : ''})</p>`;
                }
            });

            // Validation check
            const maxMonths = appointmentType === '9acad' ? 9 : appointmentType === '3sum' ? 3 : 12;
            if (totalMonthsCalculated > maxMonths + 0.1) { // Allow small rounding error
                breakdownHTML += `<p style="color: red;"><strong>Warning:</strong> Total months (${totalMonthsCalculated.toFixed(1)}) exceeds maximum for ${appointmentType === '9acad' ? 'academic' : appointmentType === '3sum' ? 'summer' : 'calendar'} appointment (${maxMonths} months). Please check dates.</p>`;
            }

            const finalFormula = formulaParts.length > 0 ? '=' + formulaParts.join('+') : '=0';
            document.getElementById('formulaOutput').textContent = finalFormula;
            document.getElementById('breakdown').innerHTML = breakdownHTML;
            document.getElementById('result').style.display = 'block';
        }

        function getIncreaseDates(startDate, endDate) {
            const dates = [];
            let year = 2025; // First increase year
            
            while (true) {
                const increaseDate = new Date(year, 7, 16); // August 16
                if (increaseDate > endDate) break;
                dates.push(increaseDate);
                year++;
            }
            
            return dates;
        }

        function splitByIncreaseDates(startDate, endDate, increaseDates) {
            const periods = [];
            let currentStart = startDate;
            
            for (const increaseDate of increaseDates) {
                if (increaseDate <= startDate) continue; // Skip increases before our start
                if (increaseDate > endDate) break; // Stop if increase is after our end
                
                // Add period from current start to day before increase
                const dayBeforeIncrease = new Date(increaseDate);
                dayBeforeIncrease.setDate(dayBeforeIncrease.getDate() - 1);
                
                periods.push({
                    start: currentStart,
                    end: dayBeforeIncrease
                });
                
                currentStart = increaseDate;
            }
            
            // Add final period
            periods.push({
                start: currentStart,
                end: endDate
            });
            
            return periods;
        }

        function countIncreasesBeforeDate(date) {
            // Count how many August 16ths have passed since we started (June 2025)
            let count = 0;
            let year = 2025;
            
            while (true) {
                const increaseDate = new Date(year, 7, 16);
                if (increaseDate > date) break;
                count++;
                year++;
            }
            
            return count;
        }

        function calculateMonthsForPeriod(start, end, appointmentType) {
            if (appointmentType === '12cal') {
                // Calendar months - count all months
                return roundToTenths(getMonthsBetweenDates(start, end));
            } else if (appointmentType === '9acad') {
                // Academic months - only count Aug 16 to May 15
                return roundToTenths(calculateAcademicMonths(start, end));
            } else if (appointmentType === '3sum') {
                // Summer months - only count May 16 to Aug 15
                return roundToTenths(calculateSummerMonths(start, end));
            }
            return 0;
        }

        function calculateAcademicMonths(start, end) {
            let totalMonths = 0;
            const startYear = start.getFullYear();
            const endYear = end.getFullYear();
            
            // Process each potential academic year in the range
            for (let year = startYear - 1; year <= endYear; year++) {
                // Academic year runs from Aug 16 of year to May 15 of year+1
                const acadStart = new Date(year, 7, 16); // Aug 16
                const acadEnd = new Date(year + 1, 4, 15); // May 15 next year
                
                // Find overlap between period and academic year
                const overlapStart = start > acadStart ? start : acadStart;
                const overlapEnd = end < acadEnd ? end : acadEnd;
                
                if (overlapStart <= overlapEnd) {
                    // Calculate months in the overlap
                    totalMonths += getMonthsBetweenDates(overlapStart, overlapEnd);
                }
            }
            
            return totalMonths;
        }

        function calculateSummerMonths(start, end) {
            let totalMonths = 0;
            const startYear = start.getFullYear();
            const endYear = end.getFullYear();
            
            // Process each potential summer in the range
            for (let year = startYear; year <= endYear; year++) {
                // Summer runs from May 16 to Aug 15
                const summerStart = new Date(year, 4, 16); // May 16
                const summerEnd = new Date(year, 7, 15); // Aug 15
                
                // Find overlap between period and summer
                const overlapStart = start > summerStart ? start : summerStart;
                const overlapEnd = end < summerEnd ? end : summerEnd;
                
                if (overlapStart <= overlapEnd) {
                    // Calculate months in the overlap
                    totalMonths += getMonthsBetweenDates(overlapStart, overlapEnd);
                }
            }
            
            return totalMonths;
        }

        function getMonthsBetweenDates(start, end) {
            const startYear = start.getFullYear();
            const startMonth = start.getMonth();
            const startDay = start.getDate();
            const endYear = end.getFullYear();
            const endMonth = end.getMonth();
            const endDay = end.getDate();

            if (startYear === endYear && startMonth === endMonth) {
                // Same month
                const daysInMonth = new Date(startYear, startMonth + 1, 0).getDate();
                return (endDay - startDay + 1) / daysInMonth;
            }

            let months = 0;

            // First month (partial)
            const daysInStartMonth = new Date(startYear, startMonth + 1, 0).getDate();
            months += (daysInStartMonth - startDay + 1) / daysInStartMonth;

            // Full months in between
            let currentDate = new Date(startYear, startMonth + 1, 1);
            while (currentDate.getFullYear() < endYear || 
                   (currentDate.getFullYear() === endYear && currentDate.getMonth() < endMonth)) {
                months += 1;
                currentDate.setMonth(currentDate.getMonth() + 1);
            }

            // Last month (partial)
            months += endDay / new Date(endYear, endMonth + 1, 0).getDate();

            return months;
        }



        function roundToTenths(num) {
            return Math.round(num * 10) / 10;
        }

        function formatDate(date) {
            return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
        }

        function copyFormula() {
            const formula = document.getElementById('formulaOutput').textContent;
            navigator.clipboard.writeText(formula).then(() => {
                const button = document.querySelector('.copy-button');
                const originalText = button.textContent;
                button.textContent = 'Copied!';
                button.style.backgroundColor = '#27ae60';
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.backgroundColor = '#27ae60';
                }, 2000);
            });
        }
    </script>
</body>
</html>
